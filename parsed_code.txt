int partition(vector<int>& arr, int low, int high, int& comparisons, int& swaps) {
    int pivotIndex = low + rand() % (high - low + 1);
    swap(arr[pivotIndex], arr[high]);
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            swap(arr[i], arr[j]);
    swap(arr[i + 1], arr[high]);
void quicksort(vector<int>& arr, int low, int high, int& comparisons, int& swaps) {
    if (low < high) {
        int pi = partition(arr, low, high, comparisons, swaps);
        quicksort(arr, low, pi - 1, comparisons, swaps);
        quicksort(arr, pi + 1, high, comparisons, swaps);
void selectionSort(vector<int>& arr){
    int n = arr.size();
    for (int i = 0; i < n-1; i++) {
        for (int j = i+1; j < n; j++) {
            if(a[j]<a[min_idx]){
        swap(arr[i], arr[min_idx]);
int main(){
    srand(time(0)); // Seed for random number generation
    while(t--){
        vector<int> arr(n);
        for(int i = 0; i < n; i++){
        quicksort(arr, 0, n - 1, comparisons, swaps);
        for(int i = 0; i < n; i++){
