int linearSum(int n) {
for(int i = 1; i <= n; i++) {
}
}
int binarySearch(int arr[], int size, int target) {
while(low <= high) {
if(arr[mid] == target) {
}
if(arr[mid] < target) {
} else {
}
}
}
void merge(int arr[], int l, int m, int r) {
for(int i = 0; i < n1; i++) {
}
for(int j = 0; j < n2; j++) {
}
while(i < n1 && j < n2) {
if(L[i] <= R[j]) {
} else {
}
}
while(i < n1) {
}
while(j < n2) {
}
}
void iterativeMergeSort(int arr[], int n) {
for(int curr_size = 1; curr_size <= n; curr_size *= 2) {
for(int left = 0; left < n; left += 2*curr_size) {
merge(arr, left, mid, right);
}
}
}
void selectionSort(int arr[], int n) {
for(int i = 0; i < n-1; i++) {
for(int j = i+1; j < n; j++) {
if(arr[j] < arr[min_idx]) {
}
}
}
}
void generateSubsets(vector<int>& nums) {
for(int i = 0; i < (1 << n); i++) {
for(int j = 0; j < n; j++) {
if(i & (1 << j)) {
}
}
cout << "}" << endl;
}
}
void generatePermutations(vector<int>& nums) {
for(int num : nums) {
}
while(i < n) {
if(c[i] < i) {
for(int num : nums) {
}
} else {
}
}
}
int main() {
cout << "Linear sum (O(n)): " << linearSum(5) << endl;
int sorted_arr[] = {1, 3, 5, 7, 9};
<< binarySearch(sorted_arr, 5, 5) << endl;
int merge_arr[] = {12, 11, 13, 5, 6};
iterativeMergeSort(merge_arr, 5);
for(int num : merge_arr) {
}
int select_arr[] = {5, 1, 4, 2, 8};
selectionSort(select_arr, 5);
for(int num : select_arr) {
}
vector<int> nums = {1, 2, 3};
generateSubsets(nums);
vector<int> perm_nums = {1, 2, 3};
generatePermutations(perm_nums);
}
